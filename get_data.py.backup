from bs4 import BeautifulSoup   # selenium으로 스크래핑한 것을 1차 가공
from selenium import webdriver  # google webdriver를 사용할거임
from pyvirtualdisplay import Display
import pymysql.cursors # python과 mysql(mariadb) 연동
import subprocess

display = Display(visible=0, size=(1920, 1080))
display.start()

chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument("--single-process")
chrome_options.add_argument("--disable-dev-shm-usage")
path='/root/Downloads/chromedriver'
driver = webdriver.Chrome(path, chrome_options=chrome_options)
driver.get('https://newgh.gnu.ac.kr/dorm/ad/fm/foodmenu/selectFoodMenuView.do') # 스크래핑할 동적 웹사이트 주소
html = driver.page_source   # 드라이버로 긁어온 정보를 html에 담음

driver.close()
display.stop()
subprocess.call("pkill -9 chrome", shell=True)
soup = BeautifulSoup(html, 'html.parser') # Beautifulsoup로 1차 가공


#br태그를 공백문자로 바꾸어 준다.
for elem in soup.find_all(["br"]):
    elem.append('\n')

table = soup('#detailForm > div > table') # 1차적으로 식단표 전체를 스크래핑
# days : 날짜 및 요일, morning : 아침, lunch : 점심, dinner : 저녁
days = soup.select_one('#detailForm > div > table > thead > tr').text.strip().replace(" ", "").split('\n')
morning = soup.select_one('#detailForm > div > table > tbody > tr:nth-child(1)').text.strip().split('\n')
lunch = soup.select_one('#detailForm > div > table > tbody > tr:nth-child(2)').text.strip().split('\n')
dinner = soup.select_one('#detailForm > div > table > tbody > tr:nth-child(3)').text.strip().split('\n')

def first_index_del(arg, repeat=1):   # 첫번째 인덱스를 삭제. ('아침', '점심', '저녁')
        for i in range(repeat):
            del arg[0]

def double_quorts_del(arg): # 각각의 인덱스 속 쌍따옴표를 찾아서 모두 삭제.
        search = '"'
        for i, word in enumerate(arg):
            arg[i] = word.strip() # 공백도 덤으로 삭제!
            if search in word:
               arg[i] = word.strip(search).strip() # 쌍따옴표 제거하고 공백 제거
        return arg


first_index_del(days)
first_index_del(morning,3)
first_index_del(lunch,3)
first_index_del(dinner,3)

double_quorts_del(morning)
double_quorts_del(lunch)
double_quorts_del(dinner)

    # 메뉴 데이터를 가공할거임. 2차 가공. 요일 별로 나눔.
def split_menu_data(args):
        count = 0
        day=[]
        day.append([])
        day_count = 0   # 요일 카운트 [요일][메뉴]
        menu_count = 0  # 메뉴 카운트

        for element in args:
            if element == '': # 공백 인덱스면
                count += 1  # 공백 개수를 세고
                continue    # 건너 뛰어라

            if count >=5 :  # 공백 개수가 연속으로 5와 같거나 크면
                day.append([])  # 요일 바뀜
                day_count += 1  # 요일 바꾸기
            count = 0   # 공백 개수 초기화
            day[day_count].append(element)
        return day

day_morning = split_menu_data(morning)
day_lunch = split_menu_data(lunch)
day_dinner = split_menu_data(dinner)

print(day_morning)
print(day_lunch)
print(day_dinner)
# Connect to the DB
connection = pymysql.connect(host='localhost',
                            user='opc',
                            password='111111',
                            db='arambyeol',
                            charset='utf8',
                            cursorclass=pymysql.cursors.DictCursor
                            )
#cursorclass=pymysql.cursors.DictCursor 딕셔너리 형태로 리턴. 없으면 그냥 배열로 리턴
                           

try:
    cursor = connection.cursor()
    # 지속적으로 변동될 WEEK, MORNING, LUNCH, DINNER 테이블 삭제 후 다시 생성.
    def init_db_setting(): # 해당 테이블이 없으면 만들어라! menudata, review, user
        if not (cursor.execute("SHOW TABLES LIKE %s", 'menudata')):
            cursor.execute("CREATE TABLE menudata(id INT(10) NOT NULL PRIMARY KEY AUTO_INCREMENT,menu VARCHAR(50) UNIQUE,score INT(10),reviewcount INT(10))")
        if not (cursor.execute("SHOW TABLES LIKE %s", 'review')):
            cursor.execute("CREATE TABLE review(user_id VARCHAR(50) NOT NULL,menu VARCHAR(50) NOT NULL, score INT(10) NOT NULL)")
        if not(cursor.execute("SHOW TABLES LIKE %s", 'user')):
            cursor.execute("CREATE TABLE user(id INT(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, user_id VARCHAR(50) NOT NULL, user_pw VARCHAR(50) NOT NULL)")
    
    def week_update():
        for i in range(0,len(days),2):
            arr = (days[i], days[i+1])
            cursor.execute("INSERT INTO week (day, date) VALUES(%s, %s)", arr)

    def db_update(): # 이미 있는 테이블이면 지우고 다시 만들어라!
        if cursor.execute("SHOW TABLES LIKE %s", 'week') or cursor.execute("SHOW TABLES LIKE %s", 'morning') or cursor.execute("SHOW TABLES LIKE %s", 'lunch') or cursor.execute("SHOW TABLES LIKE %s", 'dinner'):
            cursor.execute("DROP TABLE week")
            cursor.execute("DROP TABLE morning")
            cursor.execute("DROP TABLE lunch")
            cursor.execute("DROP TABLE dinner")
        
        cursor.execute("CREATE TABLE week(day VARCHAR(2) NOT NULL primary key,date VARCHAR(11) NOT NULL)")
        cursor.execute("CREATE TABLE morning(day VARCHAR(2) NOT NULL,course VARCHAR(50),menu VARCHAR(50) NOT NULL)")
        cursor.execute("CREATE TABLE lunch(day VARCHAR(2) NOT NULL,course VARCHAR(50),menu VARCHAR(50) NOT NULL)")
        cursor.execute("CREATE TABLE dinner(day VARCHAR(2) NOT NULL,course VARCHAR(50),menu VARCHAR(50) NOT NULL)")

    def update_menudata(): # 중복이면 입력안함(무시).
        cursor.execute("INSERT IGNORE INTO menudata (menu) SELECT menu FROM morning")
        cursor.execute("INSERT IGNORE INTO menudata (menu) SELECT menu FROM lunch")
        cursor.execute("INSERT IGNORE INTO menudata (menu) SELECT menu FROM dinner")
        # id값 1부터 다시 세기.
        cursor.execute("ALTER TABLE menudata AUTO_INCREMENT=1")
        cursor.execute("SET @COUNT = 0")
        cursor.execute("UPDATE menudata SET id = @COUNT:=@COUNT+1");

    # 아침, 점심, 저녁을 DB의 각 테이블에 저장할 함수
    def update_db_menu(arg, opt):   # 각 배열을 넘겨주고 opt로 테이블 선택 opt=0:MORNING, opt=1:LUNCH, opt=2:DINNER
        for i in range(len(arg)):   # 2차원 배열이므로 첫번째는 요일
            tag = ''    # 코스 기록
            if i==0:    # 0:일, 1:월, 2:화, 3:수, 4:목, 5:금, 6:토
                day = '일'
            elif i==1:
                day = '월'
            elif i==2:
                day = '화'
            elif i==3:
                day = '수'
            elif i==4:
                day = '목'
            elif i==5:
                day = '금'
            elif i==6:
                day = '토'
            for j in range(len(arg[i])): # 두번째는 요일별 전체 메뉴
                if(arg[i][j]=='A' or arg[i][j]=='B' or arg[i][j]=='C' or arg[i][j]=='테이크아웃'):
                    tag = arg[i][j] # A,B,C,테이크아웃 코스인 경우 tag에 저장하고 건너뛰기
                    continue
                elif not(arg[i][0]=='A' or arg[i][0]=='B' or arg[i][0]=='C' or arg[i][0]=='테이크아웃'):
                    tag = 'none'    # 코스가 아닌경우 tag에 none
                arr = (day, tag, arg[i][j])
                if(opt==0): # MORNING 테이블에 저장
                    cursor.execute("INSERT INTO morning (day, course, menu) VALUES(%s, %s, %s)", arr)
                elif(opt==1): # LUNCH 테이블에 저장
                    cursor.execute("INSERT INTO lunch (day, course, menu) VALUES(%s, %s, %s)", arr)
                elif(opt==2):   # DINNER 테이블에 저장
                    cursor.execute("INSERT INTO dinner (day, course, menu) VALUES(%s, %s, %s)", arr)
    
    # 실행부분
    init_db_setting() # 초기에 한 번만 실행함. review, user, menudata 테이블을 생성.
    db_update()   # week, morning, lunch, dinner 테이블에 스크래핑 결과를 저장.
    week_update() # WEEK 테이블에 데이터 업데이트.
    
    # 각 테이블에 데이터 업데이트. opt:0 = morning table, opt:1 = lunch table, opt:2 = dinner table
    update_db_menu(day_morning,0)
    update_db_menu(day_lunch,1)
    update_db_menu(day_dinner,2)

    update_menudata() # menudata 테이블 업데이트

    menu = cursor.execute("select * from menudata")
    menu = cursor.fetchall()
    str = []
    for i in range(len(menu)):
        temp = menu[i]['menu']
        str.append(temp)
    print(str)
    
finally:
    connection.commit() # 실행한 문장들 적용
    cursor.close()
    connection.close()
