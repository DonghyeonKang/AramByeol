#Chrmoe 웹 드라이버 초기화(웹 브라우저 자동화 위해)
# driver = webdriver.Chrome() 
# driver.get('https://www.gnu.ac.kr/dorm/ad/fm/foodmenu/selectFoodMenuView.do')
#200초 동안 프로그램 일시중단
# time.sleep(200) 

# week_element = wait.until(EC.presence_of_element_located((By.TAG_NAME, 'thead'))).text
# morning_element = wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="detailForm"]/div/table/tbody/tr[1]'))).text
# lunch_element = wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="detailForm"]/div/table/tbody/tr[2]'))).text
# dinner_element = wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="detailForm"]/div/table/tbody/tr[3]'))).text


#selenium 사용하여 데이터 추출
# week = driver.find_element(By.TAG_NAME,'thead')
# morning = driver.find_element(By.XPATH,'//*[@id="detailForm"]/div/table/tbody/tr[1]')
# lunch = driver.find_element(By.XPATH,'//*[@id="detailForm"]/div/table/tbody/tr[2]')
# dinner = driver.find_element(By.XPATH,'//*[@id="detailForm"]/div/table/tbody/tr[3]')




all_menu = menu.find_all('tr')
#print(all_menu) #아침,점심,저녁 html 리스트로 출력

#아침,점심,저녁 각각 변수에 html 저장
for i in range(3):
    if(i==0):
        mornings = all_menu[i]
    elif(i==1):
        lunches = all_menu[i]
    else:
        dinners = all_menu[i]

#print(mornings)

#아침
daily_morning = mornings.find_all('td')
morning_text = [morning.get_text(strip=True) for morning in daily_morning]
#print(morning_text) #A코스,B코스,테이크아웃 출력

#점심
daily_lunch = lunches.find_all('td')
lunch_text = [lunch.get_text(strip=True) for lunch in daily_lunch]

#저녁
daily_dinner = dinners.find_all('td')
dinner_text = [dinner.get_text(strip=True) for dinner in daily_dinner]


-----------------------------------------------------------------------------------
week = soup.find('thead')
# 월요일부터 일요일까지의 요일 텍스트 추출
day_date = week.find_all('th', scope='col')[1:]
day_date_text = [day.get_text(strip=True) for day in day_date]

#print(day_date_text) #월2023-08-14

menu = soup.find('tbody')

# 아침,점심,저녁 나타내는 th 태그 추출하여 리스트로 저장 
meal_times = menu.find_all('th', scope='row')
#print(meal_times) #[<th scope="row">아침</th>, <th scope="row">점심</th>, <th scope="row">저녁</th>]

# 각 메뉴들 담을 리스트 생성
menus = []

# 아침,점심,저녁 메뉴를 추출하여 리스트에 추가
for time in meal_times:

    meal_time = time.get_text(strip=True) #공백 제거 
    
    # 메뉴 담을 리스트
    menu_list = []
    
    # 해당 시간대에 해당하는 td 태그의 하위 요소들 추출
    menu_courses = time.find_next('td').find_all('div') #코스들을 리스트로 저장 

    for div in menu_courses:
        course_type = div.find('p', class_='fm_tit_p mgt15').get_text(strip=True)  # 코스 종류
        menu_items = div.find('p', class_='').get_text(strip=True).split('<br>')  # 각 메뉴 항목
        
        # 메뉴 항목을 분리하여 개별적으로 출력
        for item in menu_items:
            menu_list.append({'title': course_type, 'item': item})
    
    # 메뉴 리스트에 추가
    menus.append({'time': meal_time, 'menu_list': menu_list})
    
#print(menus) -> 하루치의 아침,점심,저녁 메뉴만 담겨있음 

morning = menus[0]
lunch = menus[1]
dinner = menus[2]

# 결과 출력
for meal in menus:
    print(meal['time'])
    for menu in meal['menu_list']:
        print('  -', menu['title'])
        print('    *', menu['item'])
    print()



-------------------------------------------------------------------------------------------------------
<put_data 파일 코드> 

from get_data import *
import pymysql.cursors  # python과 mysql(mariadb) 연동
## 일주일에 한 번 씩 실행될 것임. ##

# Connect to the DB
connection = pymysql.connect(host='localhost',  # 호스트 주소
                             user='root',       # 사용자 이름
                             password='root0312',  # 비밀번호
                             db='arambyeol',    # 데이터베이스 이름
                             charset='utf8',    # 문자 인코딩
                             cursorclass=pymysql.cursors.DictCursor)  # 커서 클래스 설정

#get_data 에서 스크래핑한 값들 대입
day_date = day_date
day_morning = morning
day_lunch = lunch
day_dinner = dinner

cursor = connection.cursor()

# week 테이블에 day,date 값 넣기
week_sql = "INSERT INTO week (day, date) VALUES (%s, %s)"
date_query = "SELECT date FROM week WHERE date = %s"

# 딕셔너리 첫번째 값 가져오기(값이 없다면 none 반환)
first_dateValue = next(iter(day_date.values()), None)

# # 테이블에 같은 날짜 값이 존재하는지 확인
# if first_dateValue is not None:
#     cursor.execute(date_query,(first_dateValue))
#     result = cursor.fetchone()

#     # 값이 없다면 테이블에 값 넣기
#     if result == None:
#         for day, date in day_date.items():
#             cursor.execute(week_sql, (day, date))

def db_update():  # 이미 있는 테이블이면 지우고 다시 생성 
        if cursor.execute("SHOW TABLES LIKE %s", 'week') or cursor.execute("SHOW TABLES LIKE %s", 'morning') or cursor.execute("SHOW TABLES LIKE %s", 'lunch') or cursor.execute("SHOW TABLES LIKE %s", 'dinner'):
            cursor.execute("DROP TABLE week")
            cursor.execute("DROP TABLE morning")
            cursor.execute("DROP TABLE lunch")
            cursor.execute("DROP TABLE dinner")

        cursor.execute(
            "CREATE TABLE week(day VARCHAR(2) NOT NULL primary key,date VARCHAR(11) NOT NULL)")
        cursor.execute(
            "CREATE TABLE morning(day VARCHAR(2) NOT NULL,course VARCHAR(50),menu VARCHAR(50) NOT NULL)")
        cursor.execute(
            "CREATE TABLE lunch(day VARCHAR(2) NOT NULL,course VARCHAR(50),menu VARCHAR(50) NOT NULL)")
        cursor.execute(
            "CREATE TABLE dinner(day VARCHAR(2) NOT NULL,course VARCHAR(50),menu VARCHAR(50) NOT NULL)")
        

# week 테이블에 day, date 값 넣기
db_update()
for day, date in day_date.items():
    cursor.execute(week_sql, (day, date))


# morning 테이블에 day,cource,menu 값 넣기
morning_sql = "INSERT INTO morning (day, course, menu) VALUES (%s,%s,%s)"

for day, course_data in day_morning.items():
    morning_course = course_data
    for course, menu in morning_course.items():
        cursor.execute(morning_sql,(day, course, menu))


# lunch 테이블에 day,cource,menu 값 넣기
lunch_sql = "INSERT INTO lunch (day, course, menu) VALUES (%s,%s,%s)"

for day, course_data in day_lunch.items():
    lunch_course = course_data
    for course, menu in lunch_course.items():
        cursor.execute(lunch_sql,(day, course, menu))


# dinner 테이블에 day,cource,menu 값 넣기
dinner_sql = "INSERT INTO dinner (day, course, menu) VALUES (%s,%s,%s)"

for day, course_data in day_dinner.items():
    dinner_course = course_data
    for course, menu in dinner_course.items():
        cursor.execute(dinner_sql,(day, course, menu))

connection.commit()
connection.close()